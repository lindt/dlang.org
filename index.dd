Ddoc

$(D_S D Programming Language,

$(SECTION1 ,

$(DIVC intro, $(DIV, $(DIV,
    $(DIV,
        $(TC p, pitch, $(B D) is a systems programming language with C-like
        syntax and static typing. It combines efficiency, control and modeling
        power with safety and programmer productivity.)

        $(TC p, download,
            <a href="download.html" class="btn">Download</a>
            $(BR)
            $(SPANC smallprint, Latest version: $(LATEST)
                &ndash; $(LINK2 changelog/$(LATEST).html, Changelog))
        )
    )
    $(DIVID your-code-here,
        $(DIVC tip,
            $(LINK2 https://forum.dlang.org/newpost/general, your code here)
            $(DIV,
                $(P Got a brief example illustrating D?)
                $(P Submit your code to the digitalmars.D forum specifying
                    "[your code here]" in the subject.)
                $(P Upon approval it will be showcased here on a random schedule.)
            )
        )
        $(DIVID your-code-here-default,
----
// Round floating point numbers
import std.algorithm, std.conv, std.functional,
    std.math, std.regex, std.stdio;

alias round = pipe!(to!real, std.math.round, to!string);
static reFloatingPoint = ctRegex!`[0-9]+\.[0-9]+`;

void main()
{
    // Replace anything that looks like a real
    // number with the rounded equivalent.
    stdin
        .byLine
        .map!(l => l.replaceAll!(c => c.hit.round)
                                (reFloatingPoint))
        .each!writeln;
}
----
)
$(EXTRA_EXAMPLE
----
// Sort lines
import std.stdio, std.array, std.algorithm;

void main()
{
    stdin
        .byLineCopy
        .array
        .sort!((a, b) => a > b) // descending order
        .each!writeln;
}
----
)

)
)))

$(DIVC more,

$(DIVID news,
    $(DIVID forum-summary,
    <iframe src="https://forum.dlang.org/frame-announcements"></iframe>
    <iframe src="https://forum.dlang.org/frame-discussions"></iframe>
    )
    $(DIVID twitter,
    <a class="twitter-timeline"  href="https://twitter.com/hashtag/dlang" data-widget-id="684452777939058688">#dlang Tweets</a>
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
    )
)

$(DIVC boxes,
    $(DIVC row,
        $(TOUR newspaper-o, News,
            $(P The D foundation got accepted for the Google Summer of Code 2016
                and $(LINK2 https://summerofcode.withgoogle.com/organizations/5078256051027968/, four projects)
                will be pursued over the summer.
            )
            $(P Stay updated with
                $(LINK2 http://arsdnet.net/this-week-in-d,
                    <cite>This Week in D</cite>),
                Adam D. Ruppe's weekly newsletter. $(SPANC twid)
            )
        )
        $(TOUR comments, Community,
            $(P Discuss D on the $(LINK2 https://forum.dlang.org/, forums), join
                the $(LINK2 irc://irc.freenode.net/d, IRC channel), or follow
                us on $(LINK2 https://twitter.com/D_Programming, Twitter).)
            $(P Browse the $(LINK2 https://wiki.dlang.org, wiki) where among
                other things you can find the
                $(LINK2 https://wiki.dlang.org/Review_Queue, review queue) for
                major additions to the D project.)
        )
    )
    $(DIVC row,
        $(TOUR graduation-cap, Learn,
            $(P Quick start with the $(LINK2 http://tour.dlang.org,
                introduction tour to D),
            	check out Ali Ã‡ehreli's great textbook
                $(LINK2 http://ddili.org/ders/d.en/index.html,
                <cite>Programming in D</cite>), ask questions in the
                $(LINK2 https://forum.dlang.org/group/digitalmars.D.learn,
                    Learn forum),
                see the
                $(LINK2 $(ROOT_DIR)getstarted.html, Getting Started) page for
                more.
            )
        )
        $(TOUR book, Documentation,
            $(P Refer to the documentation for the
                $(LINK2 $(ROOT_DIR)spec/spec.html, language) and for
                $(LINK2 $(ROOT_DIR)phobos/index.html, phobos), D's standard
                library. The
                $(LINK2 $(ROOT_DIR)dmd-windows.html, DMD manual) tells you how
                to use the compiler. Read
                $(LINK2 $(ROOT_DIR)articles.html, various articles) to deepen
                your understanding.
            )
        )
    )
    $(DIVC row,
        $(TOUR cubes, Packages,
            $(P DUB is the package manager for D.
                $(LINK2 https://code.dlang.org/getting_started,
                    Get started with DUB), and check out the
                $(LINK2 https://code.dlang.org/, available packages).
            )
        )
        $(TOUR wrench, Contribute,
            $(P Report any bugs you find to our $(LINK2 $(ROOT_DIR)bugstats.php,
                bug tracker). If you can fix an issue, make a pull request on
                $(LINK2 https://github.com/dlang, GitHub).)
        )
    )
)

$(DIVC whyd, $(SECTION2 Why D?,

$(DIVC section,
$(DIV, $(SECTION3 Convenience,

$(P D allows writing large code fragments without redundantly specifying types,
like dynamic languages do. On the other hand, static inference deduces types and other
code properties, giving the best of both the static and the
dynamic worlds. $(EXAMPLE 1,
----
void main()
{
    // Define an array of numbers, double[].
    // Compiler recognizes the common
    // type of all initializers.
    auto arr = [ 1, 2, 3.14, 5.1, 6 ];
    // Dictionary that maps string to int,
    // type is spelled int[string]
    auto dictionary = [ "one" : 1, "two" : 2,
        "three" : 3 ];
    // Calls the min function defined below
    auto x = min(arr[0], dictionary["two"]);
}
// Type deduction works for function results.
// This is important for generic functions,
// such as min below, which works correctly
// for all comparable types.
auto min(T1, T2)(T1 lhs, T2 rhs)
{
    return rhs < lhs ? rhs : lhs;
}
----

))

$(P Automatic memory management makes for safe, simple, and robust code.
D also supports scoped resource management (aka the
$(HTTPS en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization, RAII) idiom)
and $(LINK2 spec/statement.html#ScopeGuardStatement, $(D scope) statements) for
deterministic transactional code that is easy to write and read. $(EXAMPLE 2,

----
import std.stdio;

class Widget { }

void main()
{
    // Automatically managed.
    auto w = new Widget;
    // Code is executed in any case upon scope exit.
    scope(exit) { writeln("Exiting main."); }
    // File is closed deterministically at scope's end.
    foreach (line; File("text.txt").byLine())
    {
        writeln(line);
    }
    writeln();
}
----
)
)

$(P Built-in linear and associative arrays, slices, and ranges make daily
programming simple and pleasant for tasks, both small and large. $(EXAMPLE 3,
----
#!/usr/bin/env rdmd
import std.range, std.stdio;

// Compute average line length for stdin
void main()
{
    ulong lines = 0, sumLength = 0;
    foreach (line; stdin.byLine())
    {
        ++lines;
        sumLength += line.length;
    }
    writeln("Average line length: ",
        lines ? cast(double) sumLength / lines : 0.0);
}
----
))

)))

$(DIVC section, $(DIV, $(SECTION3 Power,

$(P The best paradigm is to not impose something at the expense of others.
D offers classic polymorphism, value semantics, functional
style, generics, generative programming, contract programming,
and more&mdash;all harmoniously integrated. $(EXAMPLE 4,
----
// Interfaces and classes
interface Printable
{
   void print(uint level)
   // contract is part of the interface
   in { assert(level > 0); }
}

// Interface implementation
class Widget : Printable
{
   void print(uint level)
   in{ }
   body{ }
}

// Single inheritance of state
class ExtendedWidget : Widget
{
   override void print(uint level)
   in { /* weakening precondition is okay */  }
   body
   {
       //... level may be 0 here ...
   }
}

// Immutable data shared across threads
immutable string programName = "demo";
// Mutable data is thread-local
int perThread = 42;
// Explicitly shared data
shared int perApp = 5;

// Structs have value semantics
struct BigNum
{
    // intercept copying
    this(this) { }
    // intercept destructor
    ~this() { }
}

void main()
{
    // ...
}
----
))

$(P D offers an innovative approach to concurrency, featuring true
immutable data, message passing, no sharing by default, and
controlled mutable sharing across threads. $(HTTP
informit.com/articles/article.aspx?p=1609144, Read more).)

$(P From simple scripts to large projects, D has the breadth
to scale with any application's needs: unit testing,
information hiding, refined modularity, fast compilation, precise
interfaces. $(HTTP drdobbs.com/high-performance-computing/217801225,
Read more).)

)))

$(DIVC section, $(DIV, $(SECTION3 Efficiency,

$(P D compiles naturally to efficient native code.)

$(P D is designed such that most "obvious" code is fast $(I and)
safe. On occasion a function might need to escape the confines of type
safety for ultimate speed and control. For such rare cases D offers
native pointers, type casts, access to any C function without any
intervening translation, manual memory management, custom allocators
and even inline assembly code. $(EXAMPLE 5,
----
import core.stdc.stdlib;

void livingDangerously()
{
    // Access to C's malloc and free primitives
    auto buf = malloc(1024 * 1024);
    // free automatically upon scope exit
    scope(exit) free(buf);
    // Interprets memory as an array of floats
    auto floats = cast(float[]) buf[0 .. 1024 * 1024];
    // Even stack allocation is possible
    auto moreBuf = alloca(4096 * 100);
    //...
}

// Using inline asm for extra speed on x86
uint checked_multiply(uint x, uint y)
{
    uint result;
    version (D_InlineAsm_X86)
    {
        // Inline assembler "sees" D variables.
        asm
        {
            mov     EAX,x        ;
            mul     EAX,y        ;
            mov     result,EAX   ;
            jc      Loverflow    ;
        }
        return result;
    }
    else
    {
        result = x * y;
        if (!y || x <= uint.max / y)
           return result;
   }
Loverflow:
   throw new Exception("multiply overflow");
}

void main()
{
    // ...
}
----
))

$(P The $(D @safe), $(D @trusted), and $(D @system) function
attributes allow the programmer to best decide the safety-efficiency
tradeoffs of an application, and have the compiler check for
consistency. $(LINK2 spec/memory-safe-d.html, Read more).)

)))

$(DIVC section, $(DIV, $(SECTION3 Industry-proven,
$(DIVC frontpage-orgs,
    $(FRONTPAGE_ORG Facebook, https://www.facebook.com, facebook.svg,
    )
    $(FRONTPAGE_ORG eBay, https://ebay.com, ebay.svg,
    )
    $(FRONTPAGE_ORG Remedy Games, http://remedygames.com, remedy.svg,
    )
    $(FRONTPAGE_ORG Sociomantic, https://www.sociomantic.com, sociomantic.png,
    )
    <div id="frontpage-orgs-more">
        $(LINK2 $(ROOT_DIR)/orgs-using-d.html, Show more organizations using D)
    </div>
))))



)) $(COMMENT SECTION2 Why D?, DIVC whyd)
) $(COMMENT more)
) $(COMMENT SECTION1)
) $(COMMENT D_S)

Macros:
    TITLE=Home
    TAG=<$1>$+</$1>
    TAG2=<$1 $2>$3</$1>
    D=<span class="d_inlinecode">$0</span>
    EXAMPLE=$(TAG2 a, id="a$1-control" class="example-control", )$(TAG2 div, id="a$1" class="example-box", $2)
    EXTRA_EXAMPLE=<div class="your-code-here-extra" style="display:none">$0</div>
    LAYOUT_PREFIX=
    LAYOUT_SUFFIX=
    $(SCRIPTLOAD $(ROOT_DIR)js/run-main-website.js)
    $(SCRIPTLOAD //arsdnet.net/this-week-in-d/twid-latest.js)
    LAYOUT_TITLE=
    TOUR=$(DIVC item, $(SECTION4 $(LINK2 $1, $(TC i, fa fa-$2 big-icon)$3), $4))
    TOUR=$(DIVC item, $(SECTION4 $(TC i, fa fa-$1 big-icon)$2, $3))
    _=
	FRONTPAGE_ORG_IMG=$(DIVC frontpage-orgs-img-wrapper, <img src="$(ROOT_DIR)images/orgs-using-d/$0" />)
    FRONTPAGE_ORG=$(DIVC frontpage-orgs-cell, $(LINK2 $2, $(FRONTPAGE_ORG_IMG $3)) $(H3 $1) $(P $4))
